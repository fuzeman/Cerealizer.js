{"version":3,"file":"cerealizer.js","sources":["../bower_components/almond/almond.js","buffer.js","handlers.js","dumper.js","cerealizer.js"],"names":["this","requirejs","require","define","undef","hasProp","obj","prop","hasOwn","call","normalize","name","baseName","nameParts","nameSegment","mapValue","foundMap","lastIndex","foundI","foundStarMap","starI","i","j","part","baseParts","split","map","config","starMap","charAt","slice","length","nodeIdCompat","jsSuffixRegExp","test","replace","concat","splice","join","indexOf","substring","makeRequire","relName","forceSync","req","apply","aps","arguments","makeNormalize","makeLoad","depName","value","defined","callDep","waiting","args","defining","main","Error","splitPrefix","prefix","index","makeConfig","makeMap","handlers","Object","prototype","hasOwnProperty","plugin","parts","f","n","pr","p","exports","e","module","id","uri","deps","callback","cjsModule","ret","usingExports","callbackType","load","undefined","alt","setTimeout","cfg","_defined","amd","jQuery","Buffer","position","read","substr","readline","end","line","write","toString","register","type","handler","getType","byName","byType","object_count","count","key","lastId","instance","Handler","collect","dumper","_id","objs_id","objs","push","dump_obj","s","dump_ref","id2id","dump_data","undump_obj","undump_data","parseInt","undump_ref","ListHandler","o","Dumper","init","priorities_objs","obj2state","obj2newargs","id2obj","dump","root_obj","root_handler","console","log","undump","txt","nb","Array","r","c","parseFloat","Boolean","dumps","buffer","loads"],"mappings":"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","sourcesContent":["/**\n * @license almond 0.2.9 Copyright (c) 2011-2014, The Dojo Foundation All Rights Reserved.\n * Available via the MIT or new BSD license.\n * see: http://github.com/jrburke/almond for details\n */\n//Going sloppy to avoid 'use strict' string cost, but strict practices should\n//be followed.\n/*jslint sloppy: true */\n/*global setTimeout: false */\n\nvar requirejs, require, define;\n(function (undef) {\n    var main, req, makeMap, handlers,\n        defined = {},\n        waiting = {},\n        config = {},\n        defining = {},\n        hasOwn = Object.prototype.hasOwnProperty,\n        aps = [].slice,\n        jsSuffixRegExp = /\\.js$/;\n\n    function hasProp(obj, prop) {\n        return hasOwn.call(obj, prop);\n    }\n\n    /**\n     * Given a relative module name, like ./something, normalize it to\n     * a real name that can be mapped to a path.\n     * @param {String} name the relative name\n     * @param {String} baseName a real name that the name arg is relative\n     * to.\n     * @returns {String} normalized name\n     */\n    function normalize(name, baseName) {\n        var nameParts, nameSegment, mapValue, foundMap, lastIndex,\n            foundI, foundStarMap, starI, i, j, part,\n            baseParts = baseName && baseName.split(\"/\"),\n            map = config.map,\n            starMap = (map && map['*']) || {};\n\n        //Adjust any relative paths.\n        if (name && name.charAt(0) === \".\") {\n            //If have a base name, try to normalize against it,\n            //otherwise, assume it is a top-level require that will\n            //be relative to baseUrl in the end.\n            if (baseName) {\n                //Convert baseName to array, and lop off the last part,\n                //so that . matches that \"directory\" and not name of the baseName's\n                //module. For instance, baseName of \"one/two/three\", maps to\n                //\"one/two/three.js\", but we want the directory, \"one/two\" for\n                //this normalization.\n                baseParts = baseParts.slice(0, baseParts.length - 1);\n                name = name.split('/');\n                lastIndex = name.length - 1;\n\n                // Node .js allowance:\n                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {\n                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');\n                }\n\n                name = baseParts.concat(name);\n\n                //start trimDots\n                for (i = 0; i < name.length; i += 1) {\n                    part = name[i];\n                    if (part === \".\") {\n                        name.splice(i, 1);\n                        i -= 1;\n                    } else if (part === \"..\") {\n                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {\n                            //End of the line. Keep at least one non-dot\n                            //path segment at the front so it can be mapped\n                            //correctly to disk. Otherwise, there is likely\n                            //no path mapping for a path starting with '..'.\n                            //This can still fail, but catches the most reasonable\n                            //uses of ..\n                            break;\n                        } else if (i > 0) {\n                            name.splice(i - 1, 2);\n                            i -= 2;\n                        }\n                    }\n                }\n                //end trimDots\n\n                name = name.join(\"/\");\n            } else if (name.indexOf('./') === 0) {\n                // No baseName, so this is ID is resolved relative\n                // to baseUrl, pull off the leading dot.\n                name = name.substring(2);\n            }\n        }\n\n        //Apply map config if available.\n        if ((baseParts || starMap) && map) {\n            nameParts = name.split('/');\n\n            for (i = nameParts.length; i > 0; i -= 1) {\n                nameSegment = nameParts.slice(0, i).join(\"/\");\n\n                if (baseParts) {\n                    //Find the longest baseName segment match in the config.\n                    //So, do joins on the biggest to smallest lengths of baseParts.\n                    for (j = baseParts.length; j > 0; j -= 1) {\n                        mapValue = map[baseParts.slice(0, j).join('/')];\n\n                        //baseName segment has  config, find if it has one for\n                        //this name.\n                        if (mapValue) {\n                            mapValue = mapValue[nameSegment];\n                            if (mapValue) {\n                                //Match, update name to the new value.\n                                foundMap = mapValue;\n                                foundI = i;\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                if (foundMap) {\n                    break;\n                }\n\n                //Check for a star map match, but just hold on to it,\n                //if there is a shorter segment match later in a matching\n                //config, then favor over this star map.\n                if (!foundStarMap && starMap && starMap[nameSegment]) {\n                    foundStarMap = starMap[nameSegment];\n                    starI = i;\n                }\n            }\n\n            if (!foundMap && foundStarMap) {\n                foundMap = foundStarMap;\n                foundI = starI;\n            }\n\n            if (foundMap) {\n                nameParts.splice(0, foundI, foundMap);\n                name = nameParts.join('/');\n            }\n        }\n\n        return name;\n    }\n\n    function makeRequire(relName, forceSync) {\n        return function () {\n            //A version of a require function that passes a moduleName\n            //value for items that may need to\n            //look up paths relative to the moduleName\n            return req.apply(undef, aps.call(arguments, 0).concat([relName, forceSync]));\n        };\n    }\n\n    function makeNormalize(relName) {\n        return function (name) {\n            return normalize(name, relName);\n        };\n    }\n\n    function makeLoad(depName) {\n        return function (value) {\n            defined[depName] = value;\n        };\n    }\n\n    function callDep(name) {\n        if (hasProp(waiting, name)) {\n            var args = waiting[name];\n            delete waiting[name];\n            defining[name] = true;\n            main.apply(undef, args);\n        }\n\n        if (!hasProp(defined, name) && !hasProp(defining, name)) {\n            throw new Error('No ' + name);\n        }\n        return defined[name];\n    }\n\n    //Turns a plugin!resource to [plugin, resource]\n    //with the plugin being undefined if the name\n    //did not have a plugin prefix.\n    function splitPrefix(name) {\n        var prefix,\n            index = name ? name.indexOf('!') : -1;\n        if (index > -1) {\n            prefix = name.substring(0, index);\n            name = name.substring(index + 1, name.length);\n        }\n        return [prefix, name];\n    }\n\n    /**\n     * Makes a name map, normalizing the name, and using a plugin\n     * for normalization if necessary. Grabs a ref to plugin\n     * too, as an optimization.\n     */\n    makeMap = function (name, relName) {\n        var plugin,\n            parts = splitPrefix(name),\n            prefix = parts[0];\n\n        name = parts[1];\n\n        if (prefix) {\n            prefix = normalize(prefix, relName);\n            plugin = callDep(prefix);\n        }\n\n        //Normalize according\n        if (prefix) {\n            if (plugin && plugin.normalize) {\n                name = plugin.normalize(name, makeNormalize(relName));\n            } else {\n                name = normalize(name, relName);\n            }\n        } else {\n            name = normalize(name, relName);\n            parts = splitPrefix(name);\n            prefix = parts[0];\n            name = parts[1];\n            if (prefix) {\n                plugin = callDep(prefix);\n            }\n        }\n\n        //Using ridiculous property names for space reasons\n        return {\n            f: prefix ? prefix + '!' + name : name, //fullName\n            n: name,\n            pr: prefix,\n            p: plugin\n        };\n    };\n\n    function makeConfig(name) {\n        return function () {\n            return (config && config.config && config.config[name]) || {};\n        };\n    }\n\n    handlers = {\n        require: function (name) {\n            return makeRequire(name);\n        },\n        exports: function (name) {\n            var e = defined[name];\n            if (typeof e !== 'undefined') {\n                return e;\n            } else {\n                return (defined[name] = {});\n            }\n        },\n        module: function (name) {\n            return {\n                id: name,\n                uri: '',\n                exports: defined[name],\n                config: makeConfig(name)\n            };\n        }\n    };\n\n    main = function (name, deps, callback, relName) {\n        var cjsModule, depName, ret, map, i,\n            args = [],\n            callbackType = typeof callback,\n            usingExports;\n\n        //Use name if no relName\n        relName = relName || name;\n\n        //Call the callback to define the module, if necessary.\n        if (callbackType === 'undefined' || callbackType === 'function') {\n            //Pull out the defined dependencies and pass the ordered\n            //values to the callback.\n            //Default to [require, exports, module] if no deps\n            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;\n            for (i = 0; i < deps.length; i += 1) {\n                map = makeMap(deps[i], relName);\n                depName = map.f;\n\n                //Fast path CommonJS standard dependencies.\n                if (depName === \"require\") {\n                    args[i] = handlers.require(name);\n                } else if (depName === \"exports\") {\n                    //CommonJS module spec 1.1\n                    args[i] = handlers.exports(name);\n                    usingExports = true;\n                } else if (depName === \"module\") {\n                    //CommonJS module spec 1.1\n                    cjsModule = args[i] = handlers.module(name);\n                } else if (hasProp(defined, depName) ||\n                           hasProp(waiting, depName) ||\n                           hasProp(defining, depName)) {\n                    args[i] = callDep(depName);\n                } else if (map.p) {\n                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});\n                    args[i] = defined[depName];\n                } else {\n                    throw new Error(name + ' missing ' + depName);\n                }\n            }\n\n            ret = callback ? callback.apply(defined[name], args) : undefined;\n\n            if (name) {\n                //If setting exports via \"module\" is in play,\n                //favor that over return value and exports. After that,\n                //favor a non-undefined return value over exports use.\n                if (cjsModule && cjsModule.exports !== undef &&\n                        cjsModule.exports !== defined[name]) {\n                    defined[name] = cjsModule.exports;\n                } else if (ret !== undef || !usingExports) {\n                    //Use the return value from the function.\n                    defined[name] = ret;\n                }\n            }\n        } else if (name) {\n            //May just be an object definition for the module. Only\n            //worry about defining if have a module name.\n            defined[name] = callback;\n        }\n    };\n\n    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {\n        if (typeof deps === \"string\") {\n            if (handlers[deps]) {\n                //callback in this case is really relName\n                return handlers[deps](callback);\n            }\n            //Just return the module wanted. In this scenario, the\n            //deps arg is the module name, and second arg (if passed)\n            //is just the relName.\n            //Normalize module name, if it contains . or ..\n            return callDep(makeMap(deps, callback).f);\n        } else if (!deps.splice) {\n            //deps is a config object, not an array.\n            config = deps;\n            if (config.deps) {\n                req(config.deps, config.callback);\n            }\n            if (!callback) {\n                return;\n            }\n\n            if (callback.splice) {\n                //callback is an array, which means it is a dependency list.\n                //Adjust args if there are dependencies\n                deps = callback;\n                callback = relName;\n                relName = null;\n            } else {\n                deps = undef;\n            }\n        }\n\n        //Support require(['a'])\n        callback = callback || function () {};\n\n        //If relName is a function, it is an errback handler,\n        //so remove it.\n        if (typeof relName === 'function') {\n            relName = forceSync;\n            forceSync = alt;\n        }\n\n        //Simulate async callback;\n        if (forceSync) {\n            main(undef, deps, callback, relName);\n        } else {\n            //Using a non-zero value because of concern for what old browsers\n            //do, and latest browsers \"upgrade\" to 4 if lower value is used:\n            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:\n            //If want a value immediately, use require('id') instead -- something\n            //that works in almond on the global level, but not guaranteed and\n            //unlikely to work in other AMD implementations.\n            setTimeout(function () {\n                main(undef, deps, callback, relName);\n            }, 4);\n        }\n\n        return req;\n    };\n\n    /**\n     * Just drops the config on the floor, but returns req in case\n     * the config return value is used.\n     */\n    req.config = function (cfg) {\n        return req(cfg);\n    };\n\n    /**\n     * Expose module registry for debugging and tooling\n     */\n    requirejs._defined = defined;\n\n    define = function (name, deps, callback) {\n\n        //This module may not have dependencies\n        if (!deps.splice) {\n            //deps is not an array, so probably means\n            //an object literal or factory function for\n            //the value. Adjust args.\n            callback = deps;\n            deps = [];\n        }\n\n        if (!hasProp(defined, name) && !hasProp(waiting, name)) {\n            waiting[name] = [name, deps, callback];\n        }\n    };\n\n    define.amd = {\n        jQuery: true\n    };\n}());\n\ndefine(\"almond\", function(){});\n\n","define('buffer',[], function(){\r\n    function Buffer(value) {\r\n        this.value = value || '';\r\n        this.position = 0;\r\n    }\r\n\r\n    Buffer.prototype.read = function(n) {\r\n        var value = this.value.substr(this.position, n);\r\n\r\n        this.position += n;\r\n        return value;\r\n    };\r\n\r\n    Buffer.prototype.readline = function() {\r\n        var end = this.value.indexOf('\\n', this.position);\r\n\r\n        if(end == -1) {\r\n            end = this.value.length;\r\n        } else {\r\n            end += 1;\r\n        }\r\n\r\n        var length = end - this.position,\r\n            line = this.value.substr(this.position, length);\r\n\r\n        this.position += length;\r\n        return line;\r\n    };\r\n\r\n    Buffer.prototype.write = function(value) {\r\n        if(typeof value !== \"string\") {\r\n            value = value.toString();\r\n        }\r\n\r\n        this.value += value;\r\n        this.position += value.length;\r\n    };\r\n\r\n    return Buffer;\r\n});\n","define('handlers',[], function() {\r\n    var handlers = {\r\n        byName: {},\r\n        byType: {},\r\n        lastId: 0,\r\n\r\n        getType: function(instance) {\r\n            var name = Object.prototype.toString.call(instance);\r\n\r\n            return name.substr(8, name.length - 9);\r\n        }\r\n    };\r\n\r\n    function register(type, handler) {\r\n        if(typeof type !== \"string\") {\r\n            type = handlers.getType(type);\r\n        }\r\n\r\n        handlers.byName[handler.name] = handler;\r\n        handlers.byType[type] = handler;\r\n    }\r\n\r\n    //\r\n    // Base\r\n    //\r\n\r\n    var Handler = {\r\n        collect: function(obj, dumper) {\r\n            if(typeof obj._id == 'undefined') {\r\n                obj._id = ++handlers.lastId;\r\n            }\r\n\r\n            if(dumper.objs_id.indexOf(obj._id) == -1) {\r\n                dumper.objs.push(obj);\r\n                dumper.objs_id.push(obj._id);\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        dump_obj: function(obj, dumper, s) {\r\n            s.write(this.name);\r\n        },\r\n\r\n        dump_ref: function(obj, dumper, s) {\r\n            s.write('r');\r\n            s.write(dumper.id2id[obj._id]);\r\n            s.write('\\n');\r\n        }\r\n    };\r\n\r\n    //\r\n    // Collections\r\n    //\r\n\r\n    function object_count(obj) {\r\n        var count = 0;\r\n\r\n        for(var key in obj) {\r\n            if (!obj.hasOwnProperty(key) || key == '_id') {\r\n                break;\r\n            }\r\n\r\n            ++count;\r\n        }\r\n\r\n        return count;\r\n    }\r\n\r\n    register({}, {\r\n        name: 'dict\\n',\r\n        type: 'class',\r\n\r\n        dump_obj: Handler.dump_obj,\r\n        dump_ref: Handler.dump_ref,\r\n\r\n        collect: function(obj, dumper) {\r\n            if(Handler.collect(obj, dumper)) {\r\n                var key;\r\n\r\n                for(key in obj) {\r\n                    if (!obj.hasOwnProperty(key) || key == '_id') {\r\n                        break;\r\n                    }\r\n\r\n                    dumper.collect(key);\r\n                }\r\n\r\n                for(key in obj) {\r\n                    if (!obj.hasOwnProperty(key) || key == '_id') {\r\n                        break;\r\n                    }\r\n\r\n                    dumper.collect(obj[key]);\r\n                }\r\n\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        dump_data: function(obj, dumper, s) {\r\n            s.write(object_count(obj));\r\n            s.write('\\n');\r\n\r\n            for(var key in obj) {\r\n                if (!obj.hasOwnProperty(key) || key == '_id') {\r\n                    break;\r\n                }\r\n\r\n                var value = obj[key];\r\n\r\n                handlers.byType[handlers.getType(value)].dump_ref(value, dumper, s);\r\n                handlers.byType[handlers.getType(key)].dump_ref(key, dumper, s);\r\n            }\r\n        },\r\n\r\n        undump_obj: function(dumper, s) {\r\n            return {};\r\n        },\r\n        undump_data: function(obj, dumper, s) {\r\n            var length = parseInt(s.readline());\r\n\r\n            for(var i = 0; i < length; ++i) {\r\n                var value = dumper.undump_ref(s),\r\n                    key = dumper.undump_ref(s);\r\n\r\n                obj[key] = value;\r\n            }\r\n        }\r\n    });\r\n\r\n    var ListHandler = {\r\n        name: 'list\\n',\r\n        type: 'class',\r\n\r\n        dump_obj: Handler.dump_obj,\r\n        dump_ref: Handler.dump_ref,\r\n\r\n        collect: function(obj, dumper) {\r\n            if(Handler.collect(obj, dumper)) {\r\n                for(var i = 0; i < obj.length; ++i){\r\n                    dumper.collect(obj[i]);\r\n                }\r\n\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        dump_data: function(obj, dumper, s) {\r\n            s.write(obj.length);\r\n            s.write('\\n');\r\n\r\n            for(var i = 0; i < obj.length; ++i) {\r\n                var o = obj[i];\r\n\r\n                handlers.byType[handlers.getType(o)].dump_ref(o, dumper, s);\r\n            }\r\n        },\r\n\r\n        undump_obj: function(dumper, s) {\r\n            return [];\r\n        },\r\n        undump_data: function(obj, dumper, s) {\r\n            var length = parseInt(s.readline());\r\n\r\n            for(var i = 0; i < length; ++i) {\r\n                obj.push(dumper.undump_ref(s));\r\n            }\r\n        }\r\n    };\r\n\r\n    register([], ListHandler);\r\n\r\n    register('frozenset', {\r\n        name: 'frozenset\\n',\r\n        type: 'class',\r\n\r\n        dump_obj: Handler.dump_obj,\r\n        dump_ref: Handler.dump_ref,\r\n\r\n        collect: ListHandler.collect,\r\n        dump_data: ListHandler.dump_data,\r\n\r\n        undump_obj: ListHandler.undump_obj,\r\n        undump_data: ListHandler.undump_data\r\n    });\r\n\r\n    register('set', {\r\n        name: 'set\\n',\r\n        type: 'class',\r\n\r\n        dump_obj: Handler.dump_obj,\r\n        dump_ref: Handler.dump_ref,\r\n\r\n        collect: ListHandler.collect,\r\n        dump_data: ListHandler.dump_data,\r\n\r\n        undump_obj: ListHandler.undump_obj,\r\n        undump_data: ListHandler.undump_data\r\n    });\r\n\r\n    register('tuple', {\r\n        name: 'tuple\\n',\r\n        type: 'class',\r\n\r\n        dump_obj: Handler.dump_obj,\r\n        dump_ref: Handler.dump_ref,\r\n\r\n        collect: ListHandler.collect,\r\n        dump_data: ListHandler.dump_data,\r\n\r\n        undump_obj: ListHandler.undump_obj,\r\n        undump_data: ListHandler.undump_data\r\n    });\r\n\r\n    //\r\n    // Types\r\n    //\r\n\r\n    register('Boolean', {\r\n        type: 'reference',\r\n\r\n        collect: function(obj, dumper) {},\r\n        dump_obj: function(obj, dumper, s) {},\r\n        dump_data: function(obj, dumper, s) {},\r\n\r\n        dump_ref: function(obj, dumper, s) {\r\n            s.write('b');\r\n            s.write(obj ? 1 : 0);\r\n        }\r\n    });\r\n\r\n    register('Null', {\r\n        type: 'reference',\r\n\r\n        collect: function(obj, dumper) {},\r\n        dump_obj: function(obj, dumper, s) {},\r\n        dump_data: function(obj, dumper, s) {},\r\n\r\n        dump_ref: function(obj, dumper, s) {\r\n            s.write('n');\r\n        }\r\n    });\r\n\r\n    register('Number', {\r\n        type: 'reference',\r\n\r\n        collect: function(obj, dumper) {},\r\n        dump_obj: function(obj, dumper, s) {},\r\n        dump_data: function(obj, dumper, s) {},\r\n\r\n        dump_ref: function(obj, dumper, s) {\r\n            if(obj % 1 > 0) {\r\n                // float\r\n                s.write('f');\r\n                s.write(obj);\r\n            } else if(obj > 2147483647) {\r\n                // long\r\n                s.write('l');\r\n                s.write(obj);\r\n                s.write('L')\r\n            } else {\r\n                // integer\r\n                s.write('i');\r\n                s.write(obj);\r\n            }\r\n            s.write('\\n');\r\n        }\r\n    });\r\n\r\n    register('String', {\r\n        type: 'reference',\r\n\r\n        collect: function(obj, dumper) {},\r\n        dump_obj: function(obj, dumper, s) {},\r\n        dump_data: function(obj, dumper, s) {},\r\n\r\n        dump_ref: function(obj, dumper, s) {\r\n            s.write('s');\r\n            s.write(obj.length);\r\n            s.write('\\n');\r\n\r\n            s.write(obj);\r\n        }\r\n    });\r\n\r\n    register('Undefined', {\r\n        type: 'reference',\r\n\r\n        collect: function(obj, dumper) {},\r\n        dump_obj: function(obj, dumper, s) {},\r\n        dump_data: function(obj, dumper, s) {},\r\n\r\n        dump_ref: function(obj, dumper, s) {\r\n            s.write('n');\r\n        }\r\n    });\r\n\r\n    return handlers;\r\n});\n","define('dumper',[\r\n    'handlers'\r\n], function(handlers) {\r\n    function Dumper() {\r\n        this.init();\r\n    }\r\n\r\n    Dumper.prototype.init = function() {\r\n        this.objs            = [];\r\n        this.objs_id         = [];\r\n        this.priorities_objs = [];\r\n        this.obj2state       = {};\r\n        this.obj2newargs     = {};\r\n        this.id2id           = {};\r\n        this.id2obj          = null;\r\n    };\r\n\r\n    Dumper.prototype.dump = function(root_obj, s) {\r\n        this.collect(root_obj);\r\n        //self.priorities_objs.sort(_priority_sorter)\r\n        //self.objs.extend([o for (priority, o) in self.priorities_objs])\r\n\r\n        s.write(\"cereal1\\n\");\r\n        s.write(this.objs.length);\r\n        s.write(\"\\n\");\r\n\r\n        var i, obj;\r\n\r\n        // id2id\r\n        for(i = 0; i < this.objs.length; ++i) {\r\n            obj = this.objs[i];\r\n\r\n            if(typeof obj._id == 'undefined') {\r\n                obj._id = ++handlers.lastId;\r\n            }\r\n\r\n            this.id2id[obj._id] = i;\r\n        }\r\n\r\n        // dump_obj\r\n        for(i = 0; i < this.objs.length; ++i) {\r\n            obj = this.objs[i];\r\n\r\n            handlers.byType[handlers.getType(obj)].dump_obj(obj, this, s);\r\n        }\r\n\r\n        // dump_data\r\n        for(i = 0; i < this.objs.length; ++i) {\r\n            obj = this.objs[i];\r\n\r\n            handlers.byType[handlers.getType(obj)].dump_data(obj, this, s);\r\n        }\r\n\r\n        var root_handler = handlers.byType[handlers.getType(root_obj)];\r\n\r\n        if(root_handler == null) {\r\n            console.log('Dumper.dump - error: unknown type: %s', handlers.getType(root_obj));\r\n            return null;\r\n        }\r\n\r\n        root_handler.dump_ref(root_obj, this, s);\r\n        this.init();\r\n    };\r\n\r\n    Dumper.prototype.undump = function(s) {\r\n        var txt = s.read(8);\r\n\r\n        if(txt != \"cereal1\\n\") {\r\n            if(txt == \"\") {\r\n                console.log('Dumper.undump - error: EOF');\r\n                return null;\r\n            } else {\r\n                console.log('Dumper.undump - error: not a cerealizer buffer');\r\n                return null;\r\n            }\r\n        }\r\n\r\n        var nb = parseInt(s.readline());\r\n\r\n        // retrieve objects\r\n        var obj, i;\r\n\r\n        this.id2obj = new Array(nb);\r\n\r\n        for(i = 0; i < nb; ++i) {\r\n            var name = s.readline();\r\n\r\n            // find handler for object\r\n            var handler = handlers.byName[name];\r\n\r\n            if(handler == undefined) {\r\n                console.log('Dumper.undump - error: unknown class/type: %s', name);\r\n                return null;\r\n            }\r\n\r\n            // undump object\r\n            obj = handler.undump_obj(this, s);\r\n\r\n            if(obj == null) {\r\n                console.log('Dumper.undump - error: unable to undump class/type: %s', name);\r\n                return null;\r\n            }\r\n\r\n            this.id2obj[i] = obj;\r\n        }\r\n\r\n        for(i = 0; i < nb; ++i) {\r\n            obj = this.id2obj[i];\r\n\r\n            handlers.byType[handlers.getType(obj)].undump_data(obj, this, s);\r\n        }\r\n\r\n        var r = this.undump_ref(s);\r\n\r\n        this.init();\r\n        return r;\r\n    };\r\n\r\n    Dumper.prototype.collect = function(obj) {\r\n        var handler = handlers.byType[handlers.getType(obj)];\r\n\r\n        if(handler == null) {\r\n            console.log('Dumper.collect - error: unknown type \"%s\"', handlers.getType(obj));\r\n            return null;\r\n        }\r\n\r\n        handler.collect(obj, this);\r\n    };\r\n\r\n    Dumper.prototype.undump_ref = function(s) {\r\n        var c = s.read(1);\r\n\r\n        switch(c) {\r\n            case 'i': return parseInt(s.readline());\r\n            case 'f': return parseFloat(s.readline());\r\n            case 's': return s.read(parseInt(s.readline()));\r\n            case 'u': return s.read(parseInt(s.readline()));\r\n            case 'r': return this.id2obj[parseInt(s.readline())];\r\n            case 'n': return null;\r\n            case 'b': return Boolean(parseInt(s.read(1)));\r\n            case 'l': return parseInt(s.readline());\r\n            case 'c':\r\n                // return complex numbers as strings\r\n                var line = s.readline();\r\n\r\n                // strip off the '\\n' character\r\n                return line.substr(0, line.length - 1);\r\n        }\r\n\r\n        console.log('Dumper.undump_ref - error: unknown type \"%s\"', c);\r\n        return null;\r\n    };\r\n\r\n    return Dumper;\r\n});\n","define('cerealizer',[\r\n    'buffer',\r\n    'dumper'\r\n], function(Buffer, Dumper) {\r\n    return {\r\n        dump: function() {},\r\n        load: function() {},\r\n\r\n        dumps: function(obj) {\r\n            var buffer = new Buffer(),\r\n                dumper = new Dumper();\r\n\r\n            dumper.dump(obj, buffer);\r\n\r\n            return buffer.value;\r\n        },\r\n        loads: function(value) {\r\n            var buffer = new Buffer(value),\r\n                dumper = new Dumper();\r\n\r\n            return dumper.undump(buffer);\r\n        }\r\n    };\r\n});\n"]}